---
name: CI

permissions:
  contents: read
  pull-requests: write

on:  # yamllint disable-line rule:truthy
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  POETRY_VERSION: 2.1.3
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}


jobs:

  test:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - '3.10'
          - '3.11'
          - '3.12'
          - '3.13'

    steps:

      - name: Checkout the repository
        uses: actions/checkout@v4.2.2

      - name: Mask existing system Python
        run: sudo rm -r /usr/bin/python*

      - name: Setup Python
        uses: actions/setup-python@v5.6.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get the precise Python version
        run: echo "PYTHON_ID=$( python -VV | sha256sum | awk '{ print $1 }' )" >> "$GITHUB_ENV"

      - name: Load the cached Poetry installation
        id: cached-poetry
        uses: actions/cache@v4.2.3
        with:
          path: ~/.local
          key: poetry-${{ env.POETRY_VERSION }}-py_${{ env.PYTHON_ID}}-0

      - name: Install Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1.4.1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load the cached dependencies
        id: cached-deps
        uses: actions/cache@v4.2.3
        with:
          path: .venv
          key: py${{ matrix.python-version }}-deps-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-deps.outputs.cache-hit != 'true'
        run: poetry install --no-interaction

      - name: Run pre-commit
        run: >-
          if [[ $GITHUB_REF == refs/heads/main ]]; then
            SKIP=no-commit-to-branch poetry run pre-commit run --all-files
          else
            poetry run pre-commit run --all-files
          fi

      - name: Run tests
        env:
          COVERAGE_FILE: .coverage.${{ matrix.python-version }}
        run: poetry run pytest --cov

      - name: Store the coverage report
        uses: actions/upload-artifact@v4.6.2
        with:
          include-hidden-files: true
          name: coverage-${{ matrix.python-version }}
          path: .coverage.${{ matrix.python-version }}

  coverage:

    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: write
      pull-requests: write

    steps:

      - name: Checkout the repository
        uses: actions/checkout@v4.2.2
        with:
          # https://github.com/py-cov-action/python-coverage-comment-action/commit/2e8dc23
          fetch-depth: 1000

      - name: Retrieve the coverage reports
        id: download
        uses: actions/download-artifact@v4.3.0
        with:
          pattern: coverage-*
          merge-multiple: true

      - name: Process the coverage reports
        id: coverage_processing
        uses: py-cov-action/python-coverage-comment-action@v3.35
        with:
          COVERAGE_DATA_BRANCH: 'COVERAGE-REPORT'
          GITHUB_TOKEN: ${{ github.token }}
          MERGE_COVERAGE_FILES: true

      - name: Store the pull request coverage comment for later posting
        if: steps.coverage_processing.outputs.COMMENT_FILE_WRITTEN == 'true'
        uses: actions/upload-artifact@v4.6.2
        with:
          name: python-coverage-comment-action
          path: python-coverage-comment-action.txt
